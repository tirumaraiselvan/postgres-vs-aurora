{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "EC2 pgBouncer Sample Template: This template shows how to create an EC2 instance, associate it with an Elastic IP address and install pgBouncer - you can use this same technique to associate an EC2 instance with an Elastic IP Address that is not created inside the template by replacing the EIP reference in the AWS::EC2::EIPAssoication resource type with the IP address of the external EIP. **WARNING** This template creates an Amazon EC2 instance and an Elastic IP Address. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "DBName": {
            "Default": "postgres",
            "Description": "Postgres database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBHost": {
            "Description": "Hostname of Postgres instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "128",
            "ConstraintDescription": "must be valid hostname"
        },
        "DBPort": {
            "Description": "Port of Postgres instance",
            "Type": "Number",
            "ConstraintDescription": "must be valid port"
        },
        "DBUser": {
            "Description": "Username for Postgres database access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "Password for Postgres database access",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "ConstraintDescription": "must contain only alphanumeric characters."
        }
    },
    "Mappings": {
        "AWSRegionAMIEC2" : {
        "us-east-1"        : {"Ubuntu16" : "ami-d15a75c7"},
	"us-east-2"        : {"Ubuntu16" : "ami-0653e888ec96eab9b"},
        "us-west-1"        : {"Ubuntu16" : "ami-a9a8e4c9"},
        "us-west-2"        : {"Ubuntu16" : "ami-746aba14"},
        "eu-west-1"        : {"Ubuntu16" : "ami-844e0bf7"},
        "eu-central-1"     : {"Ubuntu16" : "ami-a9a557c6"},
        "ap-northeast-1"   : {"Ubuntu16" : "ami-d82efcb9"},
        "ap-southeast-1"   : {"Ubuntu16" : "ami-d554f1b6"},
        "ap-southeast-2"   : {"Ubuntu16" : "ami-0bc1f168"}
        }
    },
    "Resources": {
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets" : {
                        "full_install" : [ "install_and_enable_cfn_hup", "install_psql", "install_pgbouncer" ]
                    },
	            "install_and_enable_cfn_hup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf" : {
                              "content" : { "Fn::Join" : ["", [
                                "[main]\n",
                                "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                "region=", { "Ref" : "AWS::Region" }, "\n"
                              ]]},
                              "mode"    : "000400",
                              "owner"   : "root",
                              "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                              "content": { "Fn::Join" : ["", [
                                "[cfn-auto-reloader-hook]\n",
                                "triggers=post.update\n",
                                "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                                "action=/opt/aws/bin/cfn-init -v ",
                                "         --stack ", { "Ref" : "AWS::StackName" },
                                "         --resource WebServer ",
                                "         --configsets full_install ",
                                "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                "runas=root\n"
                              ]]},
                              "mode"    : "000400",
                              "owner"   : "root",
                              "group"   : "root"
                            },
                            "/lib/systemd/system/cfn-hup.service": {
                                 "content": { "Fn::Join" : ["", [
                                 "[Unit]\n",
                                 "Description=cfn-hup daemon\n\n",
                                 "[Service]\n",
                                 "Type=simple\n",
                                 "ExecStart=/opt/aws/bin/cfn-hup\n",
                                 "Restart=always\n\n",
                                 "[Install]\n",
                                 "WantedBy=multi-user.target"]]}
                            }
			},
                        "commands" : {
                            "01_enable_cfn_hup" : {
                                "command" : "systemctl enable cfn-hup.service"
                            },
                            "02_start_cfn_hup" : {
                                "command" : "systemctl start cfn-hup.service"
                            }
                        }
                    },
		    "install_psql": {
			"packages": {
                            "apt": {
				"postgresql-client": []
			    }
			}
		    },
		    "install_pgbouncer": {
			"packages": {
                            "apt": {
                                "pgbouncer": []
			    }
			},
			"files":{
                            "/etc/pgbouncer/pgbouncer.ini": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[databases]\n\n",
                                            {
                                                "Ref": "DBName"
                                            },
                                            " = ",
                                            "host=",
                                            {
                                                "Ref": "DBHost"
                                            },
                                            " port=",
                                            {
                                                "Ref": "DBPort"
                                            },
                                            " dbname=",
                                            {
                                                "Ref": "DBName"
                                            },
                                            "\n\n",
                                            "[pgbouncer]\n\n",
                                            "logfile = /var/log/postgresql/pgbouncer.log\n",
                                            "pidfile = /var/run/postgresql/pgbouncer.pid\n",
                                            "listen_addr = *\n",
                                            "listen_port = 5432\n",
                                            "unix_socket_dir = /var/run/postgresql\n",
                                            "auth_type = md5\n",
                                            "auth_file = /etc/pgbouncer/userlist.txt\n",
                                            "pool_mode = session\n",
                                            "server_reset_query = DISCARD ALL\n",
                                            "max_client_conn = 10000\n",
                                            "default_pool_size = 100\n"
                                        ]
                                    ]
                                },
                                "mode": "000640",
                                "owner": "postgres",
                                "group": "postgres"
                            },
                            "/etc/pgbouncer/userlist.txt": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        ["\"", {"Ref": "DBUser"}, "\"", " ", "\"", {"Ref": "DBPassword"}, "\"\n"]
                                    ]
                                },
                                "mode": "000640",
                                "owner": "postgres",
                                "group": "postgres"
                            },
			    "/etc/default/pgbouncer": {
				"content": {
			            "Fn::Join": [
					"",
					["START=1\n", "ulimit -n 16384\n"]
				    ]
				},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
			    }
                        },
                        "commands" : {
                            "01_restart" : {
                                "command" : "service pgbouncer restart",
				"ignoreErrors": "true"
                            }
			}
                    }
                }
            },
            "Properties": {
                "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
                     "#!/bin/bash -xe\n",
                     "apt-get update -y\n",
                     "apt-get install -y python-setuptools\n",
                     "mkdir -p /opt/aws/bin\n",
                     "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                     "easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n",
                      "/opt/aws/bin/cfn-init -v ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource EC2Instance ",
                     "         --configsets full_install ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n",

                     "/opt/aws/bin/cfn-signal -e $? ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource EC2Instance ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n"
                    ]]}
		},
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId" : {"Fn::FindInMap": [ "AWSRegionAMIEC2", { "Ref": "AWS::Region" },"Ubuntu16"]}
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "IPAddress": {
            "Type": "AWS::EC2::EIP"
        },
        "IPAssoc": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "InstanceId": {
                    "Ref": "EC2Instance"
                },
                "EIP": {
                    "Ref": "IPAddress"
                }
            }
        }
    },
    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "EC2Instance"
            }
        },
        "InstanceIPAddress": {
            "Description": "IP address of the newly created EC2 instance",
            "Value": {
                "Ref": "IPAddress"
            }
        },
        "PostgresConnectionString" : {
            "Value" : { "Fn::Join" : ["", ["postgres://", {"Ref": "DBUser"}, ":", {"Ref": "DBPassword"}, "@", { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }, ":5432/", {"Ref": "DBName" }]] },
            "Description" : "Postgres Connection String"
        }
    }
}
